// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");

function code(resp) {
  if (typeof resp === "number") {
    if (resp === 0) {
      return 200;
    } else {
      return 201;
    }
  } else {
    switch (resp.tag | 0) {
      case 0 : 
          return 400;
      case 1 : 
          return 401;
      case 2 : 
          return 500;
      
    }
  }
}

function getBody(resp) {
  if (typeof resp === "number") {
    return null;
  } else {
    return resp[0][1];
  }
}

function formatedLog(msg, title, body) {
  return title + (": " + (msg + (". body: " + JSON.stringify(body))));
}

function msg(resp) {
  if (typeof resp === "number") {
    if (resp === 0) {
      return "Ok";
    } else {
      return "Created";
    }
  } else {
    switch (resp.tag | 0) {
      case 0 : 
          var match = resp[0];
          return formatedLog("Missing or Bad Parameters", match[0], match[1]);
      case 1 : 
          var match$1 = resp[0];
          return formatedLog("User Authentication Error", match$1[0], match$1[1]);
      case 2 : 
          var match$2 = resp[0];
          return formatedLog("Internal Server Error", match$2[0], match$2[1]);
      
    }
  }
}

function saveMsg(resp) {
  console.log(msg(resp));
  return resp;
}

var basicHeader = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Credentials": true
};

function resp(result) {
  return {
          statusCode: code(result),
          headers: basicHeader,
          body: JSON.stringify(getBody(result))
        };
}

function respOk() {
  return resp(/* Ok */0);
}

function respCreated() {
  return resp(/* Created */1);
}

function respBadRequest(title, body) {
  return resp(saveMsg(/* BadRequest */Block.__(0, [/* tuple */[
                      title,
                      body
                    ]])));
}

function respUnAuthed(title, body) {
  return resp(saveMsg(/* Unauthorized */Block.__(1, [/* tuple */[
                      title,
                      body
                    ]])));
}

function respServerErr(title, body) {
  return resp(saveMsg(/* InternalServerError */Block.__(2, [/* tuple */[
                      title,
                      body
                    ]])));
}

exports.code = code;
exports.getBody = getBody;
exports.formatedLog = formatedLog;
exports.msg = msg;
exports.saveMsg = saveMsg;
exports.basicHeader = basicHeader;
exports.resp = resp;
exports.respOk = respOk;
exports.respCreated = respCreated;
exports.respBadRequest = respBadRequest;
exports.respUnAuthed = respUnAuthed;
exports.respServerErr = respServerErr;
/* No side effect */
